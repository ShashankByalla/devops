//WARNSDORFF’S ALGORITHM ​
public class KnightsTourWarnsdorff {

    private static final int N = 8;  // Chessboard size
    private static final int[] moveX = {2, 1, -1, -2, -2, -1, 1, 2};
    private static final int[] moveY = {1, 2, 2, 1, -1, -2, -2, -1};

    private static boolean isValidMove(int x, int y, int[][] board) {
        return (x >= 0 && y >= 0 && x < N && y < N && board[x][y] == -1);
    }

    private static int countAvailableMoves(int x, int y, int[][] board) {
        int count = 0;
        for (int i = 0; i < 8; i++) {
            int nextX = x + moveX[i];
            int nextY = y + moveY[i];
            if (isValidMove(nextX, nextY, board)) {
                count++;
            }
        }
        return count;
    }

    private static boolean knightsTour(int x, int y, int moveIndex, int[][] board) {
        if (moveIndex == N * N) {
            // All squares are visited
            return true;
        }

        int nextX, nextY;

        // Try all moves from the current square
        for (int i = 0; i < 8; i++) {
            nextX = x + moveX[i];
            nextY = y + moveY[i];

            if (isValidMove(nextX, nextY, board)) {
                board[nextX][nextY] = moveIndex;

                if (knightsTour(nextX, nextY, moveIndex + 1, board)) {
                    return true;  // Move leads to a solution
                } else {
                    // Backtrack
                    board[nextX][nextY] = -1;
                }
            }
        }

        return false;  // No valid move leads to a solution
    }

    public static void printSolution(int[][] board) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[][] board = new int[N][N];

        // Initialize the board
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                board[i][j] = -1;  // -1 indicates unvisited
            }
        }

        int startX = 0;  // Starting position
        int startY = 0;

        board[startX][startY] = 0;  // Mark the starting square

        if (knightsTour(startX, startY, 1, board)) {
            System.out.println("Knight's Tour (Warnsdorff's Algorithm):");
            printSolution(board);
        } else {
            System.out.println("No solution exists.");
        }
    }
}

//SortedUniquePermutation
import java.util.Arrays;

public class SortedUniquePermutation {

    public static void generateUniquePermutations(int[] nums) {
        Arrays.sort(nums);  // Ensure the array is sorted before generating permutations
        boolean[] used = new boolean[nums.length];
        int[] currentPermutation = new int[nums.length];

        generatePermutations(nums, used, currentPermutation, 0);
    }

    private static void generatePermutations(int[] nums, boolean[] used, int[] currentPermutation, int currentIndex) {
        if (currentIndex == nums.length) {
            // Print the current permutation
            printArray(currentPermutation);
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (!used[i]) {
                // Check if the same element is already used in the current permutation
                if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {
                    continue;
                }

                used[i] = true;
                currentPermutation[currentIndex] = nums[i];

                generatePermutations(nums, used, currentPermutation, currentIndex + 1);

                used[i] = false;
            }
        }
    }

    private static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 2};

        System.out.println("Sorted Unique Permutations:");
        generateUniquePermutations(nums);
    }
}

//Quick Sort
public class QuickSort {
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Find the pivot index, elements on its left are smaller, and elements on its right are greater
            int pivotIndex = partition(arr, low, high);

            // Recursively sort the sub-arrays
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; // Choose the last element as the pivot
        int i = low - 1; // Index of smaller element

        for (int j = low; j < high; j++) {
            // If the current element is smaller than or equal to the pivot
            if (arr[j] <= pivot) {
                i++;

                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i+1] and arr[high] (put the pivot element in its correct position)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1; // Return the index of the pivot element
    }

    public static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {64, 25, 12, 22, 11};

        System.out.println("Original Array:");
        printArray(arr);

        quickSort(arr, 0, arr.length - 1);

        System.out.println("Sorted Array using QuickSort:");
        printArray(arr);
    }
}

//SELECTION SORT
public class SelectionSort {
    public static void selectionSort(int[] arr) {
        int n = arr.length;

        for (int i = 0; i < n - 1; i++) {
            // Assume the minimum element is at index i
            int minIndex = i;

            // Find the minimum element in the unsorted part of the array
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }

            // Swap the found minimum element with the element at index i
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }

    public static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {64, 25, 12, 22, 11};

        System.out.println("Original Array:");
        printArray(arr);

        selectionSort(arr);

        System.out.println("Sorted Array using Selection Sort:");
        printArray(arr);
    }
}
​
//MaximumEquilibriumSum
public class MaximumEquilibriumSum {
    public static int findMaxEquilibriumSum(int[] arr) {
        int n = arr.length;
        int totalSum = 0;
        int leftSum = 0;

        // Calculate the total sum of the array
        for (int i = 0; i < n; i++) {
            totalSum += arr[i];
        }

        // Iterate through the array to find the equilibrium index
        for (int i = 0; i < n; i++) {
            totalSum -= arr[i];  // Adjust the total sum by subtracting the current element
            if (leftSum == totalSum) {
                // Equilibrium index found, calculate equilibrium sum
                return leftSum + arr[i];
            }
            leftSum += arr[i];  // Add the current element to the left sum
        }

        // No equilibrium index found
        return -1;
    }

    public static void main(String[] args) {
        int[] arr = {1, 7, 3, 6, 5, 6};

        int maxEquilibriumSum = findMaxEquilibriumSum(arr);

        if (maxEquilibriumSum != -1) {
            System.out.println("Maximum Equilibrium Sum: " + maxEquilibriumSum);
        } else {
            System.out.println("No equilibrium index found.");
        }
    }
}

//Maneuvering Problem 
public class Vehicle {
    private int position;

    public Vehicle() {
        this.position = 0;
    }

    public void moveForward(int distance) {
        position += distance;
        System.out.println("Vehicle moved forward to position " + position);
    }

    public void moveBackward(int distance) {
        position -= distance;
        System.out.println("Vehicle moved backward to position " + position);
    }

    public int getPosition() {
        return position;
    }

    public static void main(String[] args) {
        Vehicle car = new Vehicle();
        
        car.moveForward(10);
        car.moveBackward(5);

        int finalPosition = car.getPosition();
        System.out.println("Final position of the vehicle: " + finalPosition);
    }
}

//Leaders Problem
import java.util.*;

class Main {
    public static ArrayList<Integer> Hello(int arr[], int n) {
        ArrayList<Integer> cc = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            boolean leader = true;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] > arr[i]) {
                    leader = false;
                    break;
                }
            }
            if (leader) {
                cc.add(arr[i]);
            }
        }
        return cc;
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Size of Array:");
        int n = sc.nextInt();
        int arr[] = new int[n];
        System.out.println("Enter Array Elements:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        ArrayList<Integer> dd = new ArrayList<>();
        dd = Hello(arr, n);
        for (int i = 0; i < dd.size(); i++) {
            System.out.print(dd.get(i) + " ");
        }
    }
}

//HamiltianCycle 
public class HamiltonianCycle {
    private int V;
    private int[][] graph;
    private int[] path;

    public HamiltonianCycle(int[][] graph) {
        this.graph = graph;
        this.V = graph.length;
        this.path = new int[V];
    }

    public void findHamiltonianCycle() {
        if (hamiltonianCycleUtil(0)) {
            printHamiltonianCycle();
        } else {
            System.out.println("No Hamiltonian cycle exists.");
        }
    }

    private boolean isSafe(int v, int pos) {
        if (graph[path[pos - 1]][v] == 0) {
            return false; // There is no edge between the last vertex in the path and v
        }

        for (int i = 0; i < pos; i++) {
            if (path[i] == v) {
                return false; // Vertex v is already in the path
            }
        }

        return true;
    }

    private boolean hamiltonianCycleUtil(int pos) {
        if (pos == V) {
            // All vertices are visited, check if there is an edge from the last vertex to the starting vertex
            return graph[path[pos - 1]][path[0]] == 1;
        }

        for (int v = 1; v < V; v++) {
            if (isSafe(v, pos)) {
                path[pos] = v;

                if (hamiltonianCycleUtil(pos + 1)) {
                    return true;
                }

                path[pos] = -1; // Backtrack
            }
        }

        return false;
    }

    private void printHamiltonianCycle() {
        System.out.println("Hamiltonian Cycle:");
        for (int i = 0; i < V; i++) {
            System.out.print(path[i] + " ");
        }
        System.out.println(path[0]); // Print the starting vertex to complete the cycle
    }

    public static void main(String[] args) {
        int[][] graph = {
            {0, 1, 1, 1, 0},
            {1, 0, 1, 0, 1},
            {1, 1, 0, 1, 0},
            {1, 0, 1, 0, 1},
            {0, 1, 0, 1, 0}
        };

        HamiltonianCycle hamiltonianCycle = new HamiltonianCycle(graph);
        hamiltonianCycle.findHamiltonianCycle();
    }
}

//Kneighbours or Knight Tour
import java.util.Arrays;
public class Main {
    private static final int BOARD_SIZE = 8;
    private static final int[] ROW_MOVES = {2, 1, -1, -2, -2, -1, 1, 2};
    private static final int[] COL_MOVES = {1, 2, 2, 1, -1, -2, -2, -1};
    private static boolean isSafe(int[][] board, int row, int col) {
        return (row >= 0 && row < BOARD_SIZE && col >= 0 && col < BOARD_SIZE && board[row][col] == -1);
    }
    private static int countNeighbours(int[][] board, int row, int col) {
        int count = 0;
        for (int i = 0; i < 8; i++) {
            int newRow = row + ROW_MOVES[i];
            int newCol = col + COL_MOVES[i];
            if (isSafe(board, newRow, newCol)) {
                count++;
            }
        }
        return count;
    }
    private static boolean knightTour(int[][] board, int row, int col, int move) {
        if (move == BOARD_SIZE * BOARD_SIZE) {
            return true; // All squares have been visited
        }

        int minNeighbours = Integer.MAX_VALUE;
        int minIndex = -1;

        for (int i = 0; i < 8; i++) {
            int newRow = row + ROW_MOVES[i];
            int newCol = col + COL_MOVES[i];
            if (isSafe(board, newRow, newCol)) {
                int numNeighbours = countNeighbours(board, newRow, newCol);
                if (numNeighbours < minNeighbours) {
                    minNeighbours = numNeighbours;
                    minIndex = i;
                }
            }
        }

        if (minIndex != -1) {
            int newRow = row + ROW_MOVES[minIndex];
            int newCol = col + COL_MOVES[minIndex];
            board[newRow][newCol] = move;
            if (knightTour(board, newRow, newCol, move + 1)) {
                return true;
            } else {
                board[newRow][newCol] = -1; // Backtrack
            }
        }

        return false;
    }

    public static void main(String[] args) {
        int[][] board = new int[BOARD_SIZE][BOARD_SIZE];
        for (int i = 0; i < BOARD_SIZE; i++) {
            Arrays.fill(board[i], -1); // Initialize board with -1 (unvisited)
        }

        int startRow = 0;
        int startCol = 0;

        board[startRow][startCol] = 1; // Mark the starting square as visited

        if (knightTour(board, startRow, startCol, 1)) {
            System.out.println("Knight's Tour:");
            for (int i = 0; i < BOARD_SIZE; i++) {
                for (int j = 0; j < BOARD_SIZE; j++) {
                    System.out.printf("%2d ", board[i][j]);
                }
                System.out.println();
            }
        } else {
            System.out.println("No Knight's Tour found.");
        }
    }
}

//Joseph Problem
import java.util.ArrayList;
import java.util.List;

public class JosephusProblem {
    public static int josephus(int n, int k) {
        List<Integer> people = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            people.add(i);
        }

        int index = 0;
        while (people.size() > 1) {
            index = (index + k - 1) % people.size();
            people.remove(index);
        }

        return people.get(0);
    }

    public static void main(String[] args) {
        int n = 7;  // Number of people
        int k = 3;  // Elimination step

        int survivor = josephus(n, k);
        System.out.println("The survivor is at position: " + survivor);
    }
}

//Maze Solving 
public class MazeSolver {
    private int[][] maze;
    private int rows;
    private int cols;

    public MazeSolver(int[][] maze) {
        this.maze = maze;
        this.rows = maze.length;
        this.cols = maze[0].length;
    }

    public boolean solveMaze() {
        int[][] solution = new int[rows][cols];
        if (solve(0, 0, solution)) {
            printSolution(solution);
            return true;
        }
        System.out.println("No solution exists.");
        return false;
    }

    private boolean solve(int x, int y, int[][] solution) {
        // Check if (x, y) is a valid cell
        if (x < 0 || x >= rows || y < 0 || y >= cols || maze[x][y] == 1) {
            return false;
        }

        // Mark the cell as part of the solution path
        solution[x][y] = 1;

        // Check if we reached the destination
        if (x == rows - 1 && y == cols - 1) {
            return true;
        }

        // Move down
        if (solve(x + 1, y, solution)) {
            return true;
        }

        // Move right
        if (solve(x, y + 1, solution)) {
            return true;
        }

        // If neither down nor right leads to a solution, backtrack
        solution[x][y] = 0;
        return false;
    }

    private void printSolution(int[][] solution) {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.print(solution[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int[][] maze = {
            {0, 1, 0, 0, 0},
            {0, 1, 0, 1, 0},
            {0, 0, 0, 1, 0},
            {1, 1, 1, 1, 0},
            {0, 0, 0, 0, 0}
        };

        MazeSolver mazeSolver = new MazeSolver(maze);
        mazeSolver.solveMaze();
    }
}

//Natural Sort Order
import java.util.Arrays;
import java.util.Comparator; // Add this import statement

public class NaturalSortingExample {
    public static void main(String[] args) {
        String[] items = {"item1", "item10", "item2"};

        // Natural sorting
        Arrays.sort(items, Comparator.naturalOrder());

        // Print the sorted array
        System.out.println(Arrays.toString(items));
    }
}

//Majoring Element
import java.util.HashMap;
import java.util.Map;

public class MajorityElementExample {
    public static int findMajorityElement(int[] nums) {
        Map<Integer, Integer> countMap = new HashMap<>();

        for (int num : nums) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        int majorityElement = -1;
        int majorityCount = nums.length / 2;

        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {
            if (entry.getValue() > majorityCount) {
                majorityElement = entry.getKey();
                break;
            }
        }

        return majorityElement;
    }

    public static void main(String[] args) {
        int[] array = {2, 2, 1, 1, 1, 2, 2};

        int majorityElement = findMajorityElement(array);

        if (majorityElement != -1) {
            System.out.println("Majority Element: " + majorityElement);
        } else {
            System.out.println("No Majority Element found");
        }
    }
}

//Combinations
import java.util.Arrays;

public class Main {
    public static void generateCombinations(int[] arr, int r) {
        int[] combination = new int[r];
        generateCombinationsUtil(arr, combination, 0, 0);
    }

    private static void generateCombinationsUtil(int[] arr, int[] combination, int currentIndex, int start) {
        if (currentIndex == combination.length) {
            System.out.println(Arrays.toString(combination));
            return;
        }

        for (int i = start; i < arr.length; i++) {
            if (i > start && arr[i] == arr[i - 1]) {
                continue; // Skip duplicates
            }

            combination[currentIndex] = arr[i];
            generateCombinationsUtil(arr, combination, currentIndex + 1, i + 1);
        }
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 2, 2};
        int r = 2;
        Arrays.sort(arr); // Sort the array to handle duplicates
        generateCombinations(arr, r);
    }
}

//NQueens
import java.util.Arrays;

public class Main {
    public static void solveNQueens(int n) {
        int[] queens = new int[n];
        Arrays.fill(queens, -1);

        int row = 0;
        int col = 0;
        boolean foundSolution = false;

        while (row >= 0) {
            if (col == n) {
                row--;
                if (row >= 0) {
                     // System.out.print(row);
                    col = queens[row] + 1;
                    queens[row] = -1;
                }
            } else if (isSafe(queens, row, col)) {
                queens[row] = col;
                if (row == n - 1) {
                    printSolution(queens);
                    foundSolution = true;  // Set the flag to indicate a solution has been found
                    break;  // Exit the while loop
                } else {
                    row++;
                    col = 0;
                }
            } else {
                col++;
            }
        }

        if (!foundSolution) {
            System.out.println("No solution found for N = " + n);
        }
    }

    private static boolean isSafe(int[] queens, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (queens[i] == col || queens[i] - i == col - row || queens[i] + i == col + row) {
                return false;
            }
        }
        return true;
    }

    private static void printSolution(int[] queens) {
        int n = queens.length;
        char[][] board = new char[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
            board[i][queens[i]] = 'Q';
        }
        System.out.println("Solution:");
        for (int i = 0; i < n; i++) {
            System.out.println(board[i]);
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int n = 4; // Set the board size here
        solveNQueens(n);
    }
}
